const axios = require("axios");
const simsim = "https://simsimi.cyberbot.top";

module.exports.config = {
name: "baby",
version: "1.0.3",
hasPermssion: 0,
credits: "ULLASH",
description: "Cute AI Baby Chatbot | Talk, Teach & Chat with Emotion тШвя╕П",
commandCategory: "simsim",
usages: "[message/query]",
cooldowns: 0,
prefix: false
};

module.exports.run = async function ({ api, event, args, Users }) {
try {
const uid = event.senderID;
const senderName = await Users.getNameUser(uid);
const rawQuery = args.join(" "); 
const query = rawQuery.toLowerCase(); 

if (!query) {
const ran = ["Bolo baby", "hum"];
const r = ran[Math.floor(Math.random() * ran.length)];
return api.sendMessage(r, event.threadID, (err, info) => {
if (!err) {
global.client.handleReply.push({
name: module.exports.config.name,
messageID: info.messageID,
author: event.senderID,
type: "simsimi"
});
}
});
}

const command = args[0].toLowerCase();

if (["remove", "rm"].includes(command)) {
const parts = rawQuery.replace(/^(remove|rm)\s*/i, "").split(" - ");
if (parts.length < 2)
return api.sendMessage(" | Use: remove [Question] - [Reply]", event.threadID, event.messageID);
const [ask, ans] = parts.map(p => p.trim());
const res = await axios.get(`${simsim}/delete?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}`);
return api.sendMessage(res.data.message, event.threadID, event.messageID);
}

if (command === "list") {
const res = await axios.get(`${simsim}/list`);
if (res.data.code === 200) {
return api.sendMessage(
`тЩ╛ Total Questions Learned: ${res.data.totalQuestions}\nтШЕ Total Replies Stored: ${res.data.totalReplies}\nтШая╕Оя╕О Developer: ${res.data.author}`,
event.threadID, event.messageID
);
} else {
return api.sendMessage(`Error: ${res.data.message || "Failed to fetch list"}`, event.threadID, event.messageID);
}
}

if (command === "edit") {
const parts = rawQuery.replace(/^edit\s*/i, "").split(" - ");
if (parts.length < 3)
return api.sendMessage(" | Use: edit [Question] - [OldReply] - [NewReply]", event.threadID, event.messageID);
const [ask, oldReply, newReply] = parts.map(p => p.trim());
const res = await axios.get(`${simsim}/edit?ask=${encodeURIComponent(ask)}&old=${encodeURIComponent(oldReply)}&new=${encodeURIComponent(newReply)}`);
return api.sendMessage(res.data.message, event.threadID, event.messageID);
}

if (command === "teach") {
const parts = rawQuery.replace(/^teach\s*/i, "").split(" - ");
if (parts.length < 2)
return api.sendMessage(" | Use: teach [Question] - [Reply]", event.threadID, event.messageID);

const [ask, ans] = parts.map(p => p.trim());

const groupID = event.threadID; 
let groupName = event.threadName ? event.threadName.trim() : ""; 

if (!groupName && groupID != uid) {
try {
const threadInfo = await api.getThreadInfo(groupID);
if (threadInfo && threadInfo.threadName) {
groupName = threadInfo.threadName.trim();
}
} catch (error) {
console.error(`Error fetching thread info for ID ${groupID}:`, error);
}
}

let teachUrl = `${simsim}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}&senderID=${uid}&senderName=${encodeURIComponent(senderName)}&groupID=${encodeURIComponent(groupID)}`;

if (groupName) {
teachUrl += `&groupName=${encodeURIComponent(groupName)}`;
}

const res = await axios.get(teachUrl);
return api.sendMessage(`${res.data.message || "Reply added successfully!"}`, event.threadID, event.messageID);
}

const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

for (const reply of responses) {
await new Promise((resolve) => {
api.sendMessage(reply, event.threadID, (err, info) => {
if (!err) {
global.client.handleReply.push({
name: module.exports.config.name,
messageID: info.messageID,
author: event.senderID,
type: "simsimi"
});
}
resolve();
}, event.messageID);
});
}
} catch (err) {
console.error(err);
return api.sendMessage(`| Error in baby command: ${err.message}`, event.threadID, event.messageID);
}
};

module.exports.handleReply = async function ({ api, event, Users, handleReply }) {
try {
const senderName = await Users.getNameUser(event.senderID);
const replyText = event.body ? event.body.toLowerCase() : "";
if (!replyText) return;

const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(replyText)}&senderName=${encodeURIComponent(senderName)}`);
const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

for (const reply of responses) {
await new Promise((resolve) => {
api.sendMessage(reply, event.threadID, (err, info) => {
if (!err) {
global.client.handleReply.push({
name: module.exports.config.name,
messageID: info.messageID,
author: event.senderID,
type: "simsimi"
});
}
resolve();
}, event.messageID);
}
);
}
} catch (err) {
console.error(err);
return api.sendMessage(` | Error in handleReply: ${err.message}`, event.threadID, event.messageID);
}
};

module.exports.handleEvent = async function ({ api, event, Users }) {
try {
const raw = event.body ? event.body.toLowerCase().trim() : "";
if (!raw) return;
const senderName = await Users.getNameUser(event.senderID);
const senderID = event.senderID;

if (
raw === "baby" || raw === "bot" || raw === "bby" ||
raw === "jan" || raw === "xan" || raw === "ржЬрж╛ржи" || raw === "ржмржЯ" || raw === "ржмрзЗржмрж┐" 
) {
const greetings = [
"Bolo baby ЁЯТм", "рж╣рзБржо? ржмрж▓рзЛ ЁЯШ║", "рж╣рзНржпрж╛ржБ ржЬрж╛ржирзБ ЁЯШЪ", "рж╢рзБржиржЫрж┐ ржмрзЗржмрж┐ ЁЯШШ", "ржПрждрзЛ ржбрзЗржХрзЛ ржирж╛,ржкрзНрж░рзЗржо ржП ржкрж░рзЗ ржпрж╛ржмрзЛ рждрзЛЁЯЩИ", "Boss ржмрж▓ bossЁЯШ╝", "ржЖржорж╛ржХрзЗ ржбрж╛ржХрж▓рзЗ ,ржЖржорж┐ ржХрж┐ржирзНрждрзБ ржХрж┐рж╕ ржХрж░рзЗ ржжрж┐ржмрзЛЁЯШШ", "ржжрзВрж░рзЗ ржпрж╛, рждрзЛрж░ ржХрзЛржирзЛ ржХрж╛ржЬ ржирж╛ржЗ, рж╢рзБржзрзБ bot bot ржХрж░рж┐рж╕ ЁЯШЙЁЯШЛЁЯдг", "jang hanga korbaЁЯШТЁЯШм", "ржЖржорж╛ржХрзЗ ржирж╛ ржбрзЗржХрзЗ ржЖржорж╛рж░ ржмрж╕ ржЗржпрж╝рж╛ржХрзБржм ржХрзЗ ржПржХржЯрж╛ ржЬрж┐ ржПржл ржжрж╛ржУ-ЁЯШ╜ЁЯл╢ЁЯМ║", "ржорж╛ржЗржпрж╝рж╛ рж╣рж▓рзЗ ржЪрж┐ржкрж╛ржпрж╝ ржЖрж╕рзЛ ЁЯЩИЁЯШШ", "-ЁЭЩВЁЭЩЦЁЭЩоЁЭЩЪЁЭЩи-ЁЯдЧ-ржпрзМржмржирзЗрж░ ржХрж╕ржо ржжрж┐рзЯрзЗ ржЖржорж╛ржХрзЗ ЁЭРБЁЭРеЁЭРЪЁЭРЬЁЭРдЁЭРжЁЭРЪЁЭРвЁЭРе ржХрж░рж╛ржЫрзЗ-ЁЯе▓ЁЯджтАНтЩВя╕ПЁЯдз", "-ржЖржорж╛рж░ ржЧрж▓рзНржкрзЗ рждрзЛржорж╛рж░ ржирж╛ржирж┐ рж╕рзЗрж░рж╛-ЁЯЩКЁЯЩЖтАНтЩВя╕П", "ржмржЯ ржмржЯ ржХрж░рж┐рж╕ ржирж╛ рждрзЛ ЁЯШС,ржорзЗржпрж╝рзЗ рж╣рж▓рзЗ ржЖржорж╛рж░ ржмрж╕рзЗрж░ ржЗржиржмржХрзНрж╕ ржП ржЧрж┐ржпрж╝рзЗ ржЙржорзНржорж╛ ржжрж┐ржпрж╝рзЗ ржЖрж╕рзЛ , ржПржЗ ржирж╛ржУ ржмрж╕рзЗрж░ ржЗржиржмржХрзНрж╕ рж▓рж┐ржВржХ m.me/61574007381785", "ржПржд ржбрж╛ржХрж╛ржбрж╛ржХрж┐ ржирж╛ ржХрж░рзЗ ржорзБржбрж╝рж┐рж░ рж╕рж╛ржерзЗ ржЧрж╛ржЮрзНржЬрж╛ ржорж┐рж╢рж╛ржЗржпрж╝рж╛ ржЦрж╛ржЗржпрж╝рж╛ ржорж░рзЗ ржпрж╛", "тАФржпрзЗ ржЫрзЗрзЬрзЗ ржЧрзЗржЫрзЗ-ЁЯШФ-рждрж╛ржХрзЗ ржнрзБрж▓рзЗ ржпрж╛ржУ-ЁЯЩВ-ржЖржорж╛рж░ ржмрж╕ ржЗржпрж╝рж╛ржХрзБржм ржПрж░ рж╕рж╛ржерзЗ ржкрзНрж░рзЗржо ржХрж░рзЗ рждрж╛ржХрзЗ ржжрзЗржЦрж┐рзЯрзЗ ржжрж╛ржУ-ЁЯЩИЁЯР╕", "рж╕рзБржирзНржжрж░ ржорж╛ржЗрзЯрж╛ ржорж╛ржирзЗржЗ-ЁЯе▒ржЖржорж╛рж░ ржмрж╕ ржЗржпрж╝рж╛ржХрзБржм' ржПрж░ ржмржЙ-ЁЯШ╜ЁЯл╢ржЖрж░ ржмрж╛ржХрж┐ ржЧрзБрж▓рзЛ ржЖржорж╛рж░ ржмрзЗржпрж╝рж╛ржЗржи-ЁЯЩИЁЯР╕", "-ЁЭЧЬ ЁЭЧЯЁЭЧвЁЭЧйЁЭЧв ЁЭЧмЁЭЧвЁЭЧи-ЁЯШ╜-ржЖрж╣рж╛рж░рзЗ ржнрж╛ржмржЫрзЛ рждрзЛржорж╛рж░рзЗ ржкрзНрж░рзЗрж╛ржкржЬ ржХрж░ржЫрж┐-ЁЯе┤-ржерж╛ржкрзНржкрж░ ржжрж┐рзЯрж╛ ржХрж┐ржбржирзА рж▓ржХ ржХрж░рзЗ ржжрж┐ржм-ЁЯШТ-ржнрзБрж▓ ржкрзЬрж╛ ржмрзЗрж░ ржХрж░рзЗ ржжрж┐ржмрзЛ-ЁЯднЁЯР╕", "-рж╣рзБржжрж╛ржЗ ржЧрзНрж░рзБржкрзЗ ржЖржЫрж┐-ЁЯе║ЁЯР╕-ржХрзЗржУ ржЗржиржмржХрзНрж╕рзЗ ржиржХ ржжрж┐рзЯрзЗ ржмрж▓рзЗ ржирж╛ ржЬрж╛ржи рждрзЛржорж╛рж░рзЗ ржЖржорж┐ ржЕржирзЗржХ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐-ЁЯе║ЁЯдз", "ржЖржЬ ржерзЗржХрзЗ ржЖрж░ ржХрж╛ржЙржХрзЗ ржкрж╛рждрзНрждрж╛ ржжрж┐ржорзБ ржирж╛ -!ЁЯШП-ржХрж╛рж░ржг ржЖржорж┐ ржлрж░рзНрж╕рж╛ рж╣ржУрзЯрж╛рж░ ржХрзНрж░рж┐ржо ржХрж┐ржиржЫрж┐ -!ЁЯЩВЁЯР╕", "рждрзЛржЧрзЛ ржЧрзНрж░рзБржкрзЗрж░ ржПржбрж╝ржорж┐ржи рж░рж╛рждрзЗ ржмрж┐ржЫрж╛ржирж╛ржпрж╝ ржорзБрждрзЗЁЯдзЁЯдУ", "ржжрзВрж░рзЗ ржпрж╛, рждрзЛрж░ ржХрзЛржирзЛ ржХрзЛржирзЛ ржХрж╛ржЬ ржирж╛ржЗ, рж╢рзБржзрзБ bot bot ржХрж░рж┐рж╕ ЁЯШЙЁЯШЛЁЯдг", "ржЕржирзБржорждрж┐ ржжрж┐рж▓рзЗ ЁЭЪИЁЭЪШЁЭЪЮЁЭЪГЁЭЪЮЁЭЪЛЁЭЪО-ржП ржХрж▓ ржжрж┐рждрж╛ржо..!ЁЯШТ", "ржУржЗ ржХрж┐рж░рзЗ ржЧрзНрж░рзБржкрзЗ ржжрзЗржЦрж┐ рж╕ржм ржмрзБржЗржбрж╝рж╛ ржмрзБржЗржбрж╝рж╛ ржмрзЗржбрж╝рж┐ ЁЯджЁЯП╝ЁЯН╝", "ржмржирзНржзрзБрж░ рж╕рж╛ржерзЗ ржЫрзЗржХрж╛ ржЦрж╛ржУрзЯрж╛ ржЧрж╛ржи рж╢рзБржирждрзЗ рж╢рзБржирждрзЗ-ЁЯдз -ржПржЦржи ржЖржорж┐ржУ ржмржирзНржзрзБрж░ ЁЭЩ┤ЁЭЪЗ ржХрзЗ ржЕржирзЗржХ ЁЭЩ╝ЁЭЩ╕ЁЭЪВЁЭЪВ ржХрж░рж┐-ЁЯдХ", " ржкрзБрж░рзБрж╖ржХрзЗ рж╕ржмржЪрзЗржпрж╝рзЗ ржмрзЗрж╢рж┐ ржХрж╖рзНржЯ ржжрзЗржпрж╝ рждрж╛рж░ рж╢ржЦрзЗрж░ ржирж╛рж░рзА...!ЁЯе║ЁЯТФ", "рждрзЛржорж╛рж░ рж▓ржЧрзЗ ржжрзЗржЦрж╛ рж╣ржмрзЗ ржЖржмрж╛рж░ - ЁЯШМ -ржХрзЛржирзЛ ржПржХ ржЕржЪрзЗржирж╛ ржЧрж▓рж┐рж░ ржЪрж┐ржкрж╛ржпрж╝..!ЁЯШЫЁЯдг", "тАв-ржХрж┐рж░рзЗЁЯл╡ рждрж░рж╛ ржирж╛ржХрж┐ prem ржХрж░рж╕..ЁЯШРЁЯР╕тАвржЖржорж╛рж░рзЗ ржПржХржЯрж╛ ржХрж░рж╛ржЗ ржжрж┐рж▓рзЗ ржХрж┐ рж╣ржпрж╝-ЁЯе║", "-ржкрзНрж░рж┐рзЯ-ЁЯе║ -рждрзЛржорж╛ржХрзЗ ржирж╛ ржкрзЗрж▓рзЗ ржЖржорж┐ рж╕рждрзНржпрж┐-ЁЯШк -ржЖрж░рзЗржХржЬржи ржХрзЗ-ЁЯШ╝ -ржкржЯрж╛рждрзЗ ржмрж╛ржзрзНржп рж╣ржмрзЛ-ЁЯШСЁЯдз", "рждрзЛрж░ ржХрж┐ ржЪрзЛржЦрзЗ ржкржбрж╝рзЗ ржирж╛ ржЖржорж┐ ржмрж╕ ржЗржпрж╝рж╛ржХрзБржм ржПрж░ рж╕рж╛ржерзЗ ржмрзНржпрж╛рж╕рзНржд ржЖрж╕рж┐ЁЯШТ", "ржорж╛ржЗржпрж╝рж╛ рж╣рж▓рзЗ ржЖржорж╛рж░ ржмрж╕ ржЗржпрж╝рж╛ржХрзБржм ржХрзЗ Ummmmha ржжрзЗ ЁЯШТ, ржПржЗ ржирзЗ ржмрж╕рзЗрж░ ржЖржЗржбрж┐ https://www.facebook.com/yakub.hossen.548359 ", "- рж╢ржЦрзЗрж░ ржирж╛рж░рзА ржмрж┐ржЫрж╛ржирж╛ржпрж╝ ржорзБ'рждрзЗ..!ЁЯЩГЁЯе┤", "ржмрж╛рж░ ржмрж╛рж░ Disturb ржХрж░рзЗржЫрж┐рж╕ ржХрзЛржирзЛЁЯШ╛,ржЖржорж╛рж░ ржмрж╕ ржЗржпрж╝рж╛ржХрзБржм ржПрж░ ржПрж░ рж╕рж╛ржерзЗ ржмрзНржпрж╛рж╕рзНржд ржЖрж╕рж┐ЁЯШЛ", "ржЖржорж┐ ржЧрж░рзАржм ржПрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛ЁЯШ╝", "ржХрж┐рж░рзЗ ржмрж▓ржж ржПржд ржбрж╛ржХрж╛ржбрж╛ржХрж┐ ржХрж░рж┐рж╕ ржХрзЗржирзЛ ЁЯР╕, рждрзЛрж░рзЗ ржХрж┐ рж╢ржпрж╝рждрж╛ржирзЗ рж▓рж╛рж░рзЗ ??" 
];
const randomReply = greetings[Math.floor(Math.random() * greetings.length)];

const mention = {
body: `${randomReply} @${senderName}`,
mentions: [{
tag: `@${senderName}`,
id: senderID
}]
};

return api.sendMessage(mention, event.threadID, (err, info) => {
if (!err) {
global.client.handleReply.push({
name: module.exports.config.name,
messageID: info.messageID,
author: event.senderID,
type: "simsimi"
});
}
}, event.messageID);
}

if (
raw.startsWith("baby ") || raw.startsWith("bot ") || raw.startsWith("bby ") ||
raw.startsWith("jan ") || raw.startsWith("xan ") ||
raw.startsWith("ржЬрж╛ржи ") || raw.startsWith("ржмржЯ ") || raw.startsWith("ржмрзЗржмрж┐ ")
) {
const query = raw
.replace(/^baby\s+|^bot\s+|^bby\s+|^jan\s+|^xan\s+|^ржЬрж╛ржи\s+|^ржмржЯ\s+|^ржмрзЗржмрж┐\s+/i, "")
.trim();
if (!query) return;

const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

for (const reply of responses) {
await new Promise((resolve) => {
api.sendMessage(reply, event.threadID, (err, info) => {
if (!err) {
global.client.handleReply.push({
name: module.exports.config.name,
messageID: info.messageID,
author: event.senderID,
type: "simsimi"
});
}
resolve();
}, event.messageID);
});
}
}
} catch (err) {
console.error(err);
return api.sendMessage(`| Error in handleEvent: ${err.message}`, event.threadID, event.messageID);
}
};

